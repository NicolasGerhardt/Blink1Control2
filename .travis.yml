---
# dist: trusty
language: cpp
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - g++-4.8
    - g++-4.8-multilib
    - gcc-multilib
    - libgtk2.0-0
    - libxtst6
    - libnotify4
    - libgconf2-4
    - libgtk2.0-0:i386
    - libxtst6:i386
    - libnotify4:i386
    - libgconf2-4:i386
    - libnss3:i386
    - libasound2:i386
    - libxss1:i386
    - socat
    - libusb-1.0-0:i386
    - libusb-1.0-0-dev
    - libudev-dev

# Build matrix
os:
- linux
- osx
env:
  global:
  matrix:
#  - TRAVIS_NODE_VERSION="4"
#  - TRAVIS_NODE_VERSION="6"
  - TRAVIS_NODE_VERSION="7"
#  - TRAVIS_NODE_VERSION="4" ARCH="x86"
#  - TRAVIS_NODE_VERSION="6" ARCH="x86"
#  - TRAVIS_NODE_VERSION="7" ARCH="x86"
matrix:
  exclude:
  - os: osx
    env: TRAVIS_NODE_VERSION="4" ARCH="x86"
  - os: osx
    env: TRAVIS_NODE_VERSION="6" ARCH="x86"
  - os: osx
    env: TRAVIS_NODE_VERSION="7" ARCH="x86"

cache:
  directories:
  - node_modules
  - app/node_modules
  - $HOME/.electron
  - $HOME/.cache

before_install:
# suppress 'shell_session_update' error https://github.com/travis-ci/travis-ci/issues/6307
- rvm get head
# reinstall latest nvm
- rm -rf ~/.nvm && git clone https://github.com/creationix/nvm.git ~/.nvm && (cd ~/.nvm && git checkout `git describe --abbrev=0 --tags`) && source ~/.nvm/nvm.sh
- nvm install $TRAVIS_NODE_VERSION
- PATH=$PATH:`pwd`/node_modules/.bin

- BASE_URL=$(node -p "'https://nodejs.org/dist/' + process.version")
- X86_FILE=$(node -p "'node-' + process.version + '-' + process.platform + '-x86'")
# download node if testing x86 architecture
- if [[ "$ARCH" == "x86" ]]; then wget $BASE_URL/$X86_FILE.tar.gz; tar -xf $X86_FILE.tar.gz; export PATH=$X86_FILE/bin:$PATH; fi
#- if [[ "$ARCH" == "x86" ]]; then export LDFLAGS=-L/lib/i386-linux-gnu ; fi

# print versions
- uname -a
- file `which node`
- node --version
- node -p 'process.platform + "@" + process.arch'
- npm --version
#- ldconfig -p | grep i386
#- ls -al /lib/i386-linux-gnu/*usb*

# use g++-4.8 on Linux
- if [[ $TRAVIS_OS_NAME == "linux" ]]; then export CXX=g++-4.8; fi
- $CXX --version

# figure out if we should publish
- PUBLISH_BINARY=false
# if we are building a tag then publish
- echo $TRAVIS_BRANCH
- echo `git describe --tags --always HEAD`
- if [[ $TRAVIS_BRANCH == `git describe --tags --always HEAD` ]]; then PUBLISH_BINARY=true; fi;
- echo "Publishing native platform Binary Package? ->" $PUBLISH_BINARY

# Cleanup the output of npm
- npm config set progress false
- npm config set spin false

install:
# ensure source install works
#- export V=1
#- npm install electron-builder@next # force install next version to test electron-builder
- npm install
- npm run postinstall

script:
# if publishing, do it
#- if [[ $PUBLISH_BINARY == true ]]; then node-pre-gyp package; fi;
#- if [[ $PUBLISH_BINARY == true ]]; then node-pre-gyp-github publish --release; fi;

- npm run webpack
# this builds the .dmg and .zip files
- npm run dist:draft

- echo "*** done. debug begin ***"
#- env | sort
- ls -al dist
- echo "*** done. debug end ***"

# cleanup
#- node-pre-gyp clean

# test binary exists
#- if [[ $PUBLISH_BINARY == true ]]; then npm install --fallback-to-build=false; fi;

# after_success:
# - bash <(curl -s https://codecov.io/bash)
#
# FIXME: need to parameterize this per OS, how?
before_deploy:
#  - if [[ "$TRAVIS_OS_NAME" == "osx" ]];   then export DFILE1=$(ls dist/mac/Blink1Control2*.dmg); fi
#  - if [[ "$TRAVIS_OS_NAME" == "osx" ]];   then export DFILE2=$(ls dist/mac/Blink1Control2*.zip); fi
#  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export DFILE1=$(ls dist/linux/Blink1Control2*.zip); fi
#  - export RELEASE_FILE1=$(ls dist/mac/Blink1Control2*.dmg)
#  - export RELEASE_FILE2=$(ls dist/mac/Blink1Control2*.zip)

deploy:
 # skip_cleanup: true
#  provider: releases
#  api_key:
#      secure: mg9kDnOTZdDNLrU+0ZzNeqA1hP9x3uUW5POEA8+nL1odEWQnBVL5gmFKSqV8zub52yazdEebCiDad/WpX2I7F20PmZA/LDlQO6TWdVhT5BEfgdpatOtdyvGggd6e2AG+Rv73z5Svkf+N6wCPXxNMmBl+OqU5fZigZDpib/SPijobAKvwOnHfSURL1NiBTrp5vzdpX21M7p87MrA19Pojcn7WFZ3KR0l79oXorlr6HchNY645UkdLwDHenYMGto4h5ShaLW/XYGQFulQY+RYH3RR4AVxRVxB1xsW8jvu/EQjCcAQg3pkHMw8wAbVG3siiZZLKgHfwIF3U5o7RHoYchvOxHF0FMK+NMgZdJeZBBLXm6r6UnsNXkZOHJh4QbgMRqcFxHZdLNFg6PVTNrWvLsngS/gnlMy7UxaW598vNtL2gOQ9LmtOfJmxu2exYmKfwM1tTLsMt7H5Qc2JgGQi1ZZGzRVbS7r0Xjrl25+NXAm/OylDl2Dh6zkCGm4X0d77M5RplL9+Ov+7ZEbRo8uNqyloEJGNzOVC+avCJADCNFbA2PcppAdASx7YTeshXSwm3QfNIIXpCtYjFeydKbW8V0fXy8cCX27InAD6W/IykBggaO+qUW4uBZ0eOk2s0VArLwmPQVL10yYIfGl9PTjRfbVJYjYCf3qXjSn/qWXYIu0g=
#  file:
#    - "${DFILE1}"
#    - "${DFILE2}"
#  on:
#    repo: todbot/Blink1Control2
#    tags: true
